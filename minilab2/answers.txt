Name: Braden Anderson
UCLA ID: 203744563


-------------------------------------------------------------------------------

Response to Exercise 1:

The name of the scheduling algorithm is: Round Robin, since after each process
exits or yields the scheduler switches to the next processes, wrapping around
the list of processes.


(Exercise 2 is a coding exercise)


Response to Exercise 3:

Average turnaround time for scheduling_algorithm 0: 1278.5 ms
Average turnaround time for scheduling_algorithm 1: 800 ms

Average wait time for scheduling_algorithm 0: 1.5 ms
Average wait time for scheduling_algorithm 1: 480 ms


Exercise 4:

Did you complete Exercise 4A or Exercise 4B?
4A

Exercise 5:
The first clock interrupt occurs during Process 1's execution, since it doesn't 
successfully write to the console.

(Exercise 6 is a coding exercise)

Exercise 7:
I implemented lottery scheduling. Processes are allocated 1 ticket each at the 
beginning, but can request more via system call sys_grabtix(). The scheduling is
done by choosing a random existing ticket. Behavior is to overwrite oldest 
tickets when more than NTICKETS are allocated (wraparound).

rand() is implemented by using the value of rdtsc. Unfortunately since execution
is identical each time the emulator is started up, rand() is predictable across
multiple run-throughs. Also, there are circumstances where some of the processes
never run. There is no way to fix this, since rdtsc is deterministic -- it's 
going to be the same every run. So every loop and call to yield() will be the 
same number of cycles.

The rand() call becomes predictable when the system is not receiving any input
or doing any work. This means that the instruction pointer is in a cycle of 
known length, so every call to rand() is going to return a number of known
offset; there's a chance that the result of rand() % num_processes will never
hit every element in tickets[].

Anything else you'd like us to know:


