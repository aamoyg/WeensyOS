Name: Braden Anderson
UCLA ID: 203744563


-------------------------------------------------------------------------------

Response to Exercise 1:
The sys_getpid() call will have returned the correct value, since each process
has its own set of registers.


Exercise 3 comments:
process_t now includes a pointer to another blocked process. This is set when
another process is has called sys_wait() on a given pid. For example if pid 3
calls sys_wait(7), then pid 7 points to pid 3.

Anything else you'd like us to know:



Extra credit exercises:

// Exercise 5
	int x = 0;  /* note that local variable x lives on the stack */
	int * volatile xptr = &x; // 01
	pid_t p = sys_fork();
	if (p == 0)
	{
		x++;
		if((*xptr) == 0)
			(*xptr)++;
	}
	else if (p > 0)
		sys_wait(p); // assume blocking implementation
	app_printf("%d", x);
	sys_exit(0);

// Exercise 6
	pid_t sys_newthread(void (*start_function)(void))
	{
		pid_t i;
		process_t *proc = NULL;
		uint16_t *k;
		for (i = 1; i < NPROCS; i++) {
			if(proc_array[i].p_state == P_EMPTY)
			{
				proc = &proc_array[i];
				break;
			}
		}
		if(!proc)
			return -1;
	
		proc->p_state = P_RUNNABLE;
		proc->p_registers.reg_eax = 0;
		proc->p_registers.reg_eip = (uint32_t) start_function;
		proc->p_registers.reg_esp = 
			(uint32_t) PROC1_STACK_ADDR + (i)*PROC_STACK_SIZE;
	

		// Finally, return the child's process ID to the parent.
		return i;
	}
	
